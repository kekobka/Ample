local filename = "car_builder/main.rs"

---@include ample/ample/includer.lua
require("ample/ample/includer.lua")
---@include libs/task.txt
require("libs/task.txt")
---@owneronly

if SERVER then
    net.receive("code", function()

        net.readStream(function(code)
            code = bit.decompress(code)
            prop.setPropUndo(true)
            prop.setPropClean(false)
            local p = prop.createSent(chip():getPos(), Angle(), "starfall_processor", true, {Code = code, Model = "models/spacecode/sfchip.mdl"})
            if isValid(chip():isWeldedTo()) then
                constraint.weld(chip():isWeldedTo(), p)
            end
            chip():remove()
        end)
    end)
else
    if player() ~= owner() then
        return
    end
    local CODE = file.read("ample/" .. filename)
    local TOKENIZED = Tokenizer(CODE, "ample/" .. filename)
    local TOKENS = TOKENIZED.TOKENS
    local Parsed = Parser(TOKENS, {}, filename)

    local code = tostring(Parsed)

    code = "-- all the code is at the bottom"..string.rep("\n", 100) .. code

    if code[1] == ";" then
        code = string.setChar(code, 1, "")
    end

    file.write("ampleCompiled.txt", code)
    net.start("code")
    net.writeStream(bit.compress(code))
    net.send()
end
